q()
library(DT)
library(readr)
library(here)   # Optional for managing file paths
# Read in your dataset (replace with your actual path later)
data <- read_excel(here("data", "anopheles_gambiae", "the_one_we_need.xlsx"))
library(readxl)
the_one_we_need <- read_excel("data/the_one_we_need.xlsx")
View(the_one_we_need)
library(DT)
library(readxl)
library(readr)
library(here)
# Read in your dataset (replace with your actual path later)
mosquitoes <- read_excel("data/the_one_we_need.xlsx")
# Create interactive table
datatable(data,
options = list(
pageLength = 10,
autoWidth = TRUE,
scrollX = TRUE
),
rownames = FALSE,
filter = 'top',
class = 'stripe hover cell-border order-column')
library(DT)
library(readxl)
library(readr)
library(here)
# Read in your dataset (replace with your actual path later)
mosquitoes <- read_excel("data/the_one_we_need.xlsx")
# Create interactive table
datatable(mosquitoes,
options = list(
pageLength = 10,
autoWidth = TRUE,
scrollX = TRUE
),
rownames = FALSE,
filter = 'top',
class = 'stripe hover cell-border order-column')
library(DT)
library(readxl)
library(readr)
library(here)
# Read in your dataset (replace with your actual path later)
mosquitoes <- read_excel("data/the_one_we_need.xlsx")
# Create interactive table
datatable(mosquitoes,
options = list(
pageLength = 5,
autoWidth = TRUE,
scrollX = TRUE
),
rownames = FALSE,
filter = 'top',
class = 'stripe hover cell-border order-column')
library(DT)
library(readxl)
library(readr)
library(here)
# Read in your dataset using a relative path
mosquitoes <- read_excel(here("data", "the_one_we_need.xlsx"))
# Create interactive, scrollable table with smaller footprint
datatable(
mosquitoes,
options = list(
pageLength = 5,
autoWidth = TRUE,
scrollX = TRUE,
width = "100%",   # Ensures the table fits within container
columnDefs = list(list(width = '100px', targets = "_all"))
),
rownames = FALSE,
filter = 'top',
class = 'stripe hover compact'
)
knitr::opts_chunk$set(echo = TRUE)
install.packages('mlbench')
library(mlbench)
data(BreastCancer)
library(mlbench)
data(BreastCancer)
list = rowSums(is.na(BreastCancer))
Data = BreastCancer[list==0, ]
# sample indices for training set
n = dim(Data)[1]
set.seed(1000)
train.index = sample(1:n, size = 341)
# split into training and testing sets
train.X = Data[train.index, 2:10]
test.X = Data[-train.index, 2:10]
train.Y = Data[train.index, 11]
test.Y = Data[-train.index, 11]
library(class)
n.train = length(train.Y)
set.seed(1200)
split.id = sample(1:4, size = n.train, replace = TRUE)
train.X.num = as.data.frame(lapply(train.X, as.numeric))
train.Y = as.factor(train.Y)
k.list = seq(1, 15, by = 2)
cv.error = numeric(length(k.list))
for (j in 1:length(k.list)) {
k = k.list[j]
error.sum = 0
for (i in 1:4) {
valid.index = which(split.id == i)
train.index = which(split.id != i)
x.train = train.X.num[train.index, ]
x.valid = train.X.num[valid.index, ]
y.train = train.Y[train.index]
y.valid = train.Y[valid.index]
pred = class::knn(train = x.train, test = x.valid, cl = y.train, k = k)
error = mean(pred != y.valid)
error.sum = error.sum + error
}
cv.error[j] = error.sum / 4
}
plot(k.list, cv.error, type = "b", pch = 19,
xlab = "k", ylab = "CV Misclassification Rate",
main = "4-Fold CV Error vs. k")
best.k = k.list[which.min(cv.error)]
cat("Best k =", best.k, "with CV error =", min(cv.error), "\n")
library(class)
n.train = length(train.Y)
set.seed(1200)
split.id = sample(1:4, size = n.train, replace = TRUE)
train.X.num = as.data.frame(lapply(train.X, as.numeric))
train.Y = as.factor(train.Y)
k.list = seq(1, 15, by = 2)
cv.error = numeric(length(k.list))
for (j in 1:length(k.list)) {
k = k.list[j]
error.sum = 0
for (i in 1:4) {
valid.index = which(split.id == i)
train.index = which(split.id != i)
x.train = train.X.num[train.index, ]
x.valid = train.X.num[valid.index, ]
y.train = train.Y[train.index]
y.valid = train.Y[valid.index]
pred = class::knn(train = x.train, test = x.valid, cl = y.train, k = k)
error = mean(pred != y.valid)
error.sum = error.sum + error
}
cv.error[j] = error.sum / 4
}
plot(k.list, cv.error, type = "b", pch = 19,
xlab = "k", ylab = "CV Misclassification Rate",
main = "4-Fold CV Error vs. k")
best.k = k.list[which.min(cv.error)]
cat("Best k =", best.k, "with CV error =", min(cv.error), "\n")
library(class)
test.X.num = as.data.frame(lapply(test.X, as.numeric))
test.Y = as.factor(test.Y)
knn.pred = class::knn(train = train.X.num, test = test.X.num, cl = train.Y, k = 3)
confusion_matrix = table(Predicted = knn.pred, Actual = test.Y)
print(confusion_matrix)
false_positives <- 10
false_negatives <- 5
total <- 222 + 10 + 5 + 105
misclass_rate <- (false_positives + false_negatives) / total
misclass_rate

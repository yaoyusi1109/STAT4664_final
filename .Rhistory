seed = 123
)
# Step 4: Posterior prediction for plotting
new_data <- tibble(temp = seq(min(pdr_data$temp), max(pdr_data$temp), length.out = 200))
preds <- posterior_epred(briere_fit, newdata = new_data, re_formula = NA)
pred_summary <- as_tibble(t(apply(preds, 2, function(x) {
c(mean = mean(x), lwr = quantile(x, 0.025), upr = quantile(x, 0.975))
}))) %>%
bind_cols(new_data)
# Step 5: Final plot
pdr_plot <- ggplot(pdr_data, aes(x = temp, y = PDR)) +
geom_point(size = 2) +
geom_line(data = pred_summary, aes(x = temp, y = mean), color = "black") +
geom_line(data = pred_summary, aes(x = temp, y = lwr), linetype = "dashed") +
geom_line(data = pred_summary, aes(x = temp, y = upr), linetype = "dashed") +
labs(
x = "Temperature (°C)",
y = "Parasite development rate, PDR"
) +
theme_minimal(base_size = 14)
pdr_plot
library(tidyverse)
library(brms)
library(here)
library(bayesplot)
library(patchwork)
# Step 1: Load and clean the PDR data
mosquitoes1 <- readxl::read_excel(here("data", "the_one_we_need.xlsx"))
pdr_data <- mosquitoes1 %>%
mutate(
temp = as.numeric(StandardTemp),
EIP = as.numeric(OriginalTraitValue),
PDR = 1 / EIP
) %>%
filter(!is.na(temp), !is.na(PDR))
library(tidyverse)
library(brms)
library(here)
library(bayesplot)
library(patchwork)
# Step 1: Load and clean the PDR data
mosquitoes1 <- readxl::read_excel(here("data", "the_one_we_need.xlsx"))
# Prepare the PDR data
pdr_data <- mosquitoes1 %>%
mutate(
temp = as.numeric(Interactor1Temp),
EIP = as.numeric(OriginalTraitValue),
PDR = 1 / EIP
) %>%
filter(!is.na(temp), !is.na(PDR), EIP > 0)
# Step 2: Define Briere function model in brms
briere_formula <- bf(
PDR ~ a * temp * (temp - T0) * sqrt(Tm - temp),
a + T0 + Tm ~ 1,
nl = TRUE
)
# Step 3: Fit the model
briere_fit <- brm(
formula = briere_formula,
data = pdr_data,
family = gaussian(),
prior = c(
prior(normal(0.0001, 0.0001), nlpar = "a", lb = 0),
prior(normal(10, 5), nlpar = "T0", lb = 0),
prior(normal(40, 5), nlpar = "Tm", ub = 50)
),
iter = 3000,
warmup = 1000,
chains = 4,
cores = 4,
control = list(adapt_delta = 0.95),
seed = 123
)
# Step 4: Posterior prediction for plotting
new_data <- tibble(temp = seq(min(pdr_data$temp), max(pdr_data$temp), length.out = 200))
preds <- posterior_epred(briere_fit, newdata = new_data, re_formula = NA)
pred_summary <- as_tibble(t(apply(preds, 2, function(x) {
c(mean = mean(x), lwr = quantile(x, 0.025), upr = quantile(x, 0.975))
}))) %>%
bind_cols(new_data)
# Step 5: Final plot
pdr_plot <- ggplot(pdr_data, aes(x = temp, y = PDR)) +
geom_point(size = 2) +
geom_line(data = pred_summary, aes(x = temp, y = mean), color = "black") +
geom_line(data = pred_summary, aes(x = temp, y = lwr), linetype = "dashed") +
geom_line(data = pred_summary, aes(x = temp, y = upr), linetype = "dashed") +
labs(
x = "Temperature (°C)",
y = "Parasite development rate, PDR"
) +
theme_minimal(base_size = 14)
pdr_plot
library(tidyverse)
library(brms)
library(here)
library(bayesplot)
library(patchwork)
# Assuming `posterior_predict` is the matrix of predictions from Stan (rows = draws, cols = temp points)
posterior_df <- as.data.frame(posterior_predict)
library(tidyverse)
library(brms)
library(here)
library(bayesplot)
library(patchwork)
# Step 1: Load and clean the PDR data
mosquitoes1 <- readxl::read_excel(here("data", "the_one_we_need.xlsx"))
# Prepare the PDR data
pdr_data <- mosquitoes1 %>%
mutate(
temp = as.numeric(Interactor1Temp),
EIP = as.numeric(OriginalTraitValue),
PDR = 1 / EIP
) %>%
filter(!is.na(temp), !is.na(PDR), EIP > 0)
# Step 2: Define Briere function model in brms
briere_formula <- bf(
PDR ~ a * temp * (temp - T0) * sqrt(Tm - temp),
a + T0 + Tm ~ 1,
nl = TRUE
)
# Step 3: Fit the model
briere_fit <- brm(
formula = briere_formula,
data = pdr_data,
family = gaussian(),
prior = c(
prior(normal(0.0001, 0.0001), nlpar = "a", lb = 0),
prior(normal(10, 5), nlpar = "T0", lb = 0),
prior(normal(40, 5), nlpar = "Tm", ub = 50)
),
iter = 3000,
warmup = 1000,
chains = 4,
cores = 4,
control = list(adapt_delta = 0.95),
seed = 123
)
# Step 4: Posterior prediction for plotting
new_data <- tibble(temp = seq(min(pdr_data$temp), max(pdr_data$temp), length.out = 200))
preds <- posterior_epred(briere_fit, newdata = new_data, re_formula = NA)
pred_summary <- as_tibble(t(apply(preds, 2, function(x) {
c(mean = mean(x), lwr = quantile(x, 0.025), upr = quantile(x, 0.975))
}))) %>%
bind_cols(new_data)
# Step 5: Final plot
pdr_plot <- ggplot(pdr_data, aes(x = temp, y = PDR)) +
geom_point(size = 2) +
geom_line(data = pred_summary, aes(x = temp, y = mean), color = "black") +
geom_line(data = pred_summary, aes(x = temp, y = lwr), linetype = "dashed") +
geom_line(data = pred_summary, aes(x = temp, y = upr), linetype = "dashed") +
labs(
x = "Temperature (°C)",
y = "Parasite development rate, PDR"
) +
theme_minimal(base_size = 14)
library(dplyr)
library(tidyr)
library(ggplot2)
# Assuming `posterior_predict` is the matrix of predictions from Stan (rows = draws, cols = temp points)
posterior_df <- as.data.frame(posterior_predict)
names(mosquitoes1)
library(readxl)
library(dplyr)
library(ggplot2)
library(cmdstanr)
install.packages('cmdstanr')
library(readxl)
library(dplyr)
library(ggplot2)
library(cmdstanr)
library(readxl)
library(dplyr)
library(ggplot2)
library(R2jags)
install.packages('R2jags')
library(readxl)
library(dplyr)
library(ggplot2)
library(R2jags)
# Load the dataset
# mosquitoes1 <- read_excel(here::here("data", "the_one_we_need.xlsx"))
# Step 1: Clean and filter for PDR
df <- mosquitoes1 %>%
filter(grepl("PDR", OriginalTraitName, ignore.case = TRUE)) %>%
select(temp = Interactor1Temp, PDR = OriginalTraitValue) %>%
filter(!is.na(temp), !is.na(PDR))
# Scale temperature for numerical stability (optional)
df$temp_scaled <- df$temp / 10
# Step 2: Prepare data for JAGS
data_jags <- list(
N = nrow(df),
temp = df$temp_scaled,
PDR = df$PDR
)
# Step 3: Write JAGS model
jags_model <- "
model {
for (i in 1:N) {
mu[i] <- ifelse(temp[i] > T0 && temp[i] < Tm,
c * temp[i] * (temp[i] - T0) * sqrt(Tm - temp[i]),
0)
PDR[i] ~ dnorm(mu[i], tau)
}
# Priors
c ~ dunif(0, 10)
T0 ~ dunif(0, 5)
Tm ~ dunif(3, 7)
tau <- pow(sigma, -2)
sigma ~ dunif(0, 5)
}
"
# Step 4: Initial values and parameters
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 1, 3), Tm = runif(1, 5, 7), sigma = runif(1, 0.1, 1))
}
params <- c("c", "T0", "Tm", "sigma", "mu")
# Step 5: Run the JAGS model
fit <- jags(data = data_jags,
inits = inits,
parameters.to.save = params,
model.file = textConnection(jags_model),
n.chains = 3,
n.iter = 5000,
n.burnin = 1000)
library(readxl)
library(dplyr)
library(ggplot2)
library(R2jags)
# Load the dataset
# mosquitoes1 <- read_excel(here::here("data", "the_one_we_need.xlsx"))
# Step 1: Clean and filter for PDR
df <- mosquitoes1 %>%
filter(grepl("PDR", OriginalTraitName, ignore.case = TRUE)) %>%
select(temp = Interactor1Temp, PDR = OriginalTraitValue) %>%
filter(!is.na(temp), !is.na(PDR))
# Scale temperature for numerical stability (optional)
df$temp_scaled <- df$temp / 10
# Step 2: Prepare data for JAGS
data_jags <- list(
N = nrow(df),
temp = df$temp_scaled,
PDR = df$PDR
)
# Step 3: Write JAGS model
jags_model <- "
model {
for (i in 1:N) {
mu[i] <- ifelse(temp[i] > T0 && temp[i] < Tm,
c * temp[i] * (temp[i] - T0) * sqrt(Tm - temp[i]),
0)
PDR[i] ~ dnorm(mu[i], tau)
}
# Priors
c ~ dunif(0, 10)
T0 ~ dunif(0, 5)
Tm ~ dunif(3, 7)
tau <- pow(sigma, -2)
sigma ~ dunif(0, 5)
}
"
# Step 4: Initial values and parameters
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 1, 3), Tm = runif(1, 5, 7), sigma = runif(1, 0.1, 1))
}
params <- c("c", "T0", "Tm", "sigma")
# Step 5: Run the JAGS model
fit <- jags(
data = data_jags,
inits = inits,
parameters.to.save = params,
model.file = textConnection(jags_model),
n.chains = 3,
n.iter = 5000,
n.burnin = 1000
)
library(rjags)
library(tidyverse)
library(here)
# Load data
mosquitoes1 <- readxl::read_excel(here("data", "the_one_we_need.xlsx"))
# Filter and prepare PDR data
pdr_data <- mosquitoes1 %>%
filter(OriginalTraitName == "EIP (extrinsic incubation period)",
!is.na(Interactor1Temp),
!is.na(OriginalTraitValue)) %>%
mutate(
temp = as.numeric(Interactor1Temp),
pdr = 1 / as.numeric(OriginalTraitValue)
) %>%
arrange(temp)
# Define JAGS model string
jags_model <- "
model {
for (i in 1:N) {
pdr[i] ~ dnorm(mu[i], tau)
mu[i] <- c * temp[i] * (temp[i] - T0) * sqrt(Tm - temp[i])
}
# Priors (informative)
T0 ~ dnorm(14, 1 / (3.5^2))
tm ~ dgamma(14.7, 3.1)
Tm <- 31 + tm
c ~ dexp(100)
# Likelihood precision
tau <- pow(sigma, -2)
sigma ~ dunif(0, 10)
}
"
# Bundle data for JAGS
data_jags <- list(
temp = pdr_data$temp,
pdr = pdr_data$pdr,
N = nrow(pdr_data)
)
# Initial values
inits <- function() {
list(T0 = 14, tm = 5, c = 0.001, sigma = 1)
}
# Parameters to monitor
params <- c("T0", "Tm", "c", "sigma")
# Run the JAGS model
model <- jags.model(textConnection(jags_model), data = data_jags, inits = inits, n.chains = 3)
update(model, 1000)  # Burn-in
samples <- coda::coda.samples(model, variable.names = params, n.iter = 4000)
library(rjags)
library(tidyverse)
library(here)
# Load data
mosquitoes1 <- readxl::read_excel(here("data", "the_one_we_need.xlsx"))
# Filter and prepare PDR data
pdr_data <- mosquitoes1 %>%
filter(OriginalTraitName == "EIP (extrinsic incubation period)",
!is.na(Interactor1Temp),
!is.na(OriginalTraitValue)) %>%
mutate(
temp = as.numeric(Interactor1Temp),
pdr = 1 / as.numeric(OriginalTraitValue)
) %>%
arrange(temp)
# Define JAGS model string
jags_model <- "
model {
for (i in 1:N) {
pdr[i] ~ dnorm(mu[i], tau)
mu[i] <- c * temp[i] * (temp[i] - T0) * sqrt(Tm - temp[i])
}
# Priors (informative)
T0 ~ dnorm(14, 1 / (3.5^2))
tm ~ dgamma(14.7, 3.1)
Tm <- 31 + tm
c ~ dexp(100)
# Likelihood precision
tau <- pow(sigma, -2)
sigma ~ dunif(0, 10)
}
"
# Bundle data for JAGS
data_jags <- list(
temp = pdr_data$temp,
pdr = pdr_data$pdr,
N = nrow(pdr_data)
)
# Initial values
inits <- function() {
list(T0 = 14, tm = 5, c = 0.001, sigma = 1)
}
# Parameters to monitor
params <- c("T0", "Tm", "c", "sigma")
# Run the JAGS model
model <- jags.model(textConnection(jags_model), data = data_jags, inits = inits, n.chains = 3)
update(model, 1000)  # Burn-in
samples <- rjags::coda.samples(model, variable.names = params, n.iter = 4000)
# Summarize posterior
summary(samples)
library(ggplot2)
library(dplyr)
library(coda)
library(tidyr)
# Step 1: Extract summary statistics
summary_stats <- summary(samples)
post_means <- summary_stats$statistics[, "Mean"]
T0 <- post_means["T0"]
Tm <- post_means["Tm"]
c_param <- post_means["c"]
# Step 2: Define the Brière function
briere <- function(T, T0, Tm, c) {
out <- c * T * (T - T0) * sqrt(Tm - T)
out[T <= T0 | T >= Tm] <- 0
return(out)
}
# Step 3: Generate prediction ribbon from posterior draws
posterior_df <- do.call(rbind, samples)
temps <- seq(5, 45, length.out = 200)
pred_matrix <- apply(posterior_df, 1, function(row) {
briere(temps, row["T0"], row["Tm"], row["c"])
})
pred_summary <- data.frame(
temp = temps,
mean = rowMeans(pred_matrix),
lwr = apply(pred_matrix, 1, quantile, 0.025),
upr = apply(pred_matrix, 1, quantile, 0.975)
)
# Step 4: Clean observed data
pdr_data_clean <- mosquitoes1 %>%
filter(OriginalTraitName == "parasite development rate (1/EIP)") %>%
mutate(
temp = as.numeric(Interactor1Temp),
PDR = as.numeric(OriginalTraitValue),
species_marker = case_when(
Interactor1Species == "gambiae" ~ "An. gambiae",
grepl("falciparum", OriginalTraitDef, ignore.case = TRUE) ~ "Other anopheline",
TRUE ~ "Other"
),
shape = case_when(
species_marker == "An. gambiae" ~ 19,  # solid circle
species_marker == "Other anopheline" ~ 3,  # plus
TRUE ~ 8  # star
)
) %>%
filter(!is.na(temp), !is.na(PDR))
# Step 5: Plot
ggplot() +
geom_ribbon(data = pred_summary, aes(x = temp, ymin = lwr, ymax = upr), alpha = 0.2, linetype = "dashed") +
geom_line(data = pred_summary, aes(x = temp, y = mean), size = 1) +
geom_point(data = pdr_data_clean, aes(x = temp, y = PDR, shape = species_marker), size = 2) +
scale_shape_manual(values = c("An. gambiae" = 19, "Other anopheline" = 3, "Other" = 8)) +
labs(
x = "Temperature (°C)",
y = "Parasite development rate, PDR",
shape = "Species"
) +
theme_minimal()
library(ggplot2)
library(truncnorm)
install.packages('truncnorm')
library(ggplot2)
library(truncnorm)
# Parameters for the truncated normal
mean_T0 <- 12.3
sd_T0 <- 2.5
# Truncation bounds
lower <- 0
upper <- Inf
# Generate samples from the truncated normal
set.seed(123)
samples_T0 <- rtruncnorm(10000, a = lower, b = upper, mean = mean_T0, sd = sd_T0)
# Plot
ggplot(data.frame(T0 = samples_T0), aes(x = T0)) +
geom_density(fill = "steelblue", alpha = 0.6) +
labs(title = expression(paste("Prior for ", T[0], ": Truncated Normal(12.3, ", 2.5^2, ")")),
x = expression(T[0]),
y = "Density") +
theme_minimal(base_size = 14)
library(ggplot2)
library(truncnorm)
# Parameters for Tm prior
mean_Tm <- 35
sd_Tm <- 1.0
T0_fixed <- 12.3  # Lower bound is T0
upper <- 45
# Sample from the truncated normal
set.seed(456)
samples_Tm <- rtruncnorm(10000, a = T0_fixed, b = upper, mean = mean_Tm, sd = sd_Tm)
# Plot
ggplot(data.frame(Tm = samples_Tm), aes(x = Tm)) +
geom_density(fill = "darkorange", alpha = 0.6) +
labs(title = expression(paste("Prior for ", T[m], ": Truncated Normal(35, ", 1.0^2, ") on [", T[0], ", 45]")),
x = expression(T[m]),
y = "Density") +
theme_minimal(base_size = 14)
library(ggplot2)
# Parameters for the gamma distribution
shape_c <- 2
rate_c <- 40000
# Create a sequence of c values
c_vals <- seq(0, 0.0002, length.out = 1000)
density_vals <- dgamma(c_vals, shape = shape_c, rate = rate_c)
# Plot
ggplot(data.frame(c = c_vals, density = density_vals), aes(x = c, y = density)) +
geom_line(color = "darkblue", size = 1) +
labs(title = expression(paste("Prior for ", c, ": Gamma(2, 40000)")),
x = "c", y = "Density") +
theme_minimal(base_size = 14)
library(ggplot2)
# Define values and uniform density
sigma_vals <- seq(0, 1, length.out = 500)
density_vals <- dunif(sigma_vals, min = 0, max = 1)
# Plot
ggplot(data.frame(sigma = sigma_vals, density = density_vals), aes(x = sigma, y = density)) +
geom_line(color = "darkgreen", size = 1) +
labs(title = expression(paste("Prior for ", sigma, ": Uniform(0, 1)")),
x = expression(sigma), y = "Density") +
theme_minimal(base_size = 14)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='yusiyao', token='08C032BF8DD7B4DBBC2E5705D1C8FCD6', secret='SUaSuJQHPc0rWR+xucIhR0LbhoTi994rVy3DgbXd')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('/Users/yusiyao/Desktop/VT/STAT_4664_Stochastic/final')
quarto publish quarto-pub
quarto publish quarto-pub --no-render
ls
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(DT)
trait_data <- read_csv("data/anopheles_gambiae/vec_traits_download_Wed Apr 30 2025 19_32_46 GMT-0400 (Eastern Daylight Time).csv")
trait_data <- read_csv("data/plasmodium_falciparum/vec_traits_download_Wed Apr 30 2025 19_32_46 GMT-0400 (Eastern Daylight Time).csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(DT)
trait_data <- read_csv("data/vec_traits_download_Wed Apr 30 2025 19_32_46 GMT-0400 (Eastern Daylight Time).csv'")

stroke = FALSE,
fillOpacity = 0.7,
label = ~paste0("Species: ", Interactor1Species)
) %>%
addLegend(
position = "bottomright",
colors = c("red", "blue"),
labels = c("Target Species", "Other"),
title = "Species Type"
)
library(DT)
library(readxl)
library(readr)
library(here)
# Load both datasets
mosquitoes1 <- read_excel(here("data", "the_one_we_need.xlsx"))
mosquitoes2 <- read_csv(here("data", "the_one_we_need_2.csv"))
# Render first table
datatable(
mosquitoes1,
options = list(
pageLength = 5,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = '50px', targets = "_all")
)
),
class = 'compact stripe hover',
rownames = FALSE,
filter = 'top',
callback = JS(
"$('table.dataTable').css({'font-size': '12px'});",
"$('table.dataTable tbody td').css({'padding': '4px'});"
)
)
# Render second table
datatable(
mosquitoes2,
options = list(
pageLength = 5,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = '50px', targets = "_all")
)
),
class = 'compact stripe hover',
rownames = FALSE,
filter = 'top',
callback = JS(
"$('table.dataTable').css({'font-size': '12px'});",
"$('table.dataTable tbody td').css({'padding': '4px'});"
)
)
library(DT)
library(readxl)
library(readr)
library(here)
# Load both datasets
mosquitoes1 <- read_excel(here("data", "the_one_we_need.xlsx"))
mosquitoes2 <- read_csv(here("data", "the_one_we_need_2.csv"), show_col_types = FALSE)
# Render first table
datatable(
mosquitoes1,
options = list(
pageLength = 5,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = '50px', targets = "_all")
)
),
class = 'compact stripe hover',
rownames = FALSE,
filter = 'top',
callback = JS(
"$('table.dataTable').css({'font-size': '12px'});",
"$('table.dataTable tbody td').css({'padding': '4px'});"
)
)
# Insert a horizontal rule separator
cat("<hr style='margin: 30px 0;'>")
# Render second table
datatable(
mosquitoes2,
options = list(
pageLength = 5,
scrollX = TRUE,
autoWidth = TRUE,
columnDefs = list(
list(width = '50px', targets = "_all")
)
),
class = 'compact stripe hover',
rownames = FALSE,
filter = 'top',
callback = JS(
"$('table.dataTable').css({'font-size': '12px'});",
"$('table.dataTable tbody td').css({'padding': '4px'});"
)
)
head(trait_data)
names(trait_data)
library(ggplot2)
library(rjags)
library(coda)
# JAGS model using Brière function
briere_model <- "
model {
for (i in 1:N) {
trait[i] ~ dnorm(mu[i], tau)
mu[i] <- c * T[i] * (T[i] - T0) * sqrt(Tm - T[i])
}
c ~ dgamma(1, 10)
T0 ~ dunif(0, 24)
Tm ~ dunif(25, 45)
sigma ~ dunif(0, 10)
tau <- pow(sigma, -2)
}
"
# Prepare data for JAGS
jags_data <- list(
T = df$T,
trait = df$trait,
N = nrow(df)
)
# Initial values and parameters
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 0, 20), Tm = runif(1, 25, 45), sigma = runif(1, 0, 1))
}
params <- c("c", "T0", "Tm", "sigma")
# Run model
model <- jags.model(textConnection(briere_model), data = jags_data, inits = inits, n.chains = 3)
update(model, 1000)
samples <- coda.samples(model, variable.names = params, n.iter = 5000)
# Posterior draws
samples_df <- as.data.frame(do.call(rbind, samples))
# Predictive temperature range
temp_seq <- seq(min(df$T) - 2, max(df$T) + 5, length.out = 200)
# Predict Brière curve for each posterior draw
pred_matrix <- apply(samples_df[sample(1:nrow(samples_df), 1000), c("c", "T0", "Tm")], 1, function(pars) {
c_val <- pars[1]
T0_val <- pars[2]
Tm_val <- pars[3]
ifelse(
temp_seq > T0_val & temp_seq < Tm_val,
c_val * temp_seq * (temp_seq - T0_val) * sqrt(pmax(Tm_val - temp_seq, 0)),
0
)
})
# Summarize predictions
pred_df <- data.frame(
temp = temp_seq,
mean = rowMeans(pred_matrix),
lower = apply(pred_matrix, 1, quantile, 0.025),
upper = apply(pred_matrix, 1, quantile, 0.975)
)
# Plot
ggplot(df, aes(x = T, y = trait)) +
geom_point(size = 2, alpha = 0.8) +
geom_ribbon(data = pred_df, aes(x = temp, ymin = lower, ymax = upper),
inherit.aes = FALSE, fill = "lightblue", alpha = 0.4) +
geom_line(data = pred_df, aes(x = temp, y = mean),
inherit.aes = FALSE, color = "blue", linewidth = 1.2) +
labs(
title = "Mosquito Development Rate (MDR) with 95% Credible Interval",
x = "Temperature (°C)",
y = "MDR"
) +
theme_minimal()
library(tidyverse)
library(rjags)
library(coda)
# Filter for the MDR-like trait (optional if needed)
df <- trait_data %>%
filter(OriginalTraitName == "MDR") %>%   # Adjust if you know the label
select(T = Interactor1Temp, trait = OriginalTraitValue) %>%
drop_na() %>%
filter(trait > 0) %>%                    # Avoid divide-by-zero
mutate(rate = 1 / trait)                 # Convert duration to rate
# JAGS model using Brière form
briere_model <- "
model {
for (i in 1:N) {
rate[i] ~ dnorm(mu[i], tau)
mu[i] <- c * T[i] * (T[i] - T0) * sqrt(Tm - T[i])
}
c ~ dgamma(1, 10)
T0 ~ dunif(0, 24)
Tm ~ dunif(25, 45)
sigma ~ dunif(0, 10)
tau <- pow(sigma, -2)
}
"
# JAGS input
jags_data <- list(
T = df$T,
rate = df$rate,
N = nrow(df)
)
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 0, 20), Tm = runif(1, 25, 45), sigma = runif(1, 0, 1))
}
params <- c("c", "T0", "Tm", "sigma")
model <- jags.model(textConnection(briere_model), data = jags_data, inits = inits, n.chains = 3)
update(model, 1000)
samples <- coda.samples(model, variable.names = params, n.iter = 5000)
# Extract posterior draws
samples_df <- as.data.frame(do.call(rbind, samples))
temp_seq <- seq(min(df$T) - 2, max(df$T) + 5, length.out = 200)
df <- trait_data %>%
filter(OriginalTraitName == "MDR") %>%  # Adjust this if needed
select(T = Interactor1Temp, trait = OriginalTraitValue) %>%
drop_na(T, trait) %>%                   # Ensure both columns are not NA
filter(trait > 0)
library(tidyverse)
library(rjags)
library(coda)
# Filter for the MDR-like trait (optional if needed)
df <- trait_data %>%
filter(OriginalTraitName == "MDR") %>%   # Adjust if you know the label
select(T = Interactor1Temp, trait = OriginalTraitValue) %>%
drop_na() %>%
filter(trait > 0) %>%                    # Avoid divide-by-zero
mutate(rate = 1 / trait)                 # Convert duration to rate
# JAGS model using Brière form
briere_model <- "
model {
for (i in 1:N) {
rate[i] ~ dnorm(mu[i], tau)
mu[i] <- c * T[i] * (T[i] - T0) * sqrt(Tm - T[i])
}
c ~ dgamma(1, 10)
T0 ~ dunif(0, 24)
Tm ~ dunif(25, 45)
sigma ~ dunif(0, 10)
tau <- pow(sigma, -2)
}
"
# JAGS input
jags_data <- list(
T = df$T,
rate = df$rate,
N = nrow(df)
)
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 0, 20), Tm = runif(1, 25, 45), sigma = runif(1, 0, 1))
}
params <- c("c", "T0", "Tm", "sigma")
model <- jags.model(textConnection(briere_model), data = jags_data, inits = inits, n.chains = 3)
update(model, 1000)
samples <- coda.samples(model, variable.names = params, n.iter = 5000)
# Extract posterior draws
samples_df <- as.data.frame(do.call(rbind, samples))
temp_seq <- seq(min(df$T) - 2, max(df$T) + 5, length.out = 200)
nrow(df)
summary(df)
library(ggplot2)
library(rjags)
library(coda)
# JAGS model using Brière function
briere_model <- "
model {
for (i in 1:N) {
trait[i] ~ dnorm(mu[i], tau)
mu[i] <- c * T[i] * (T[i] - T0) * sqrt(Tm - T[i])
}
c ~ dgamma(1, 10)
T0 ~ dunif(0, 24)
Tm ~ dunif(25, 45)
sigma ~ dunif(0, 10)
tau <- pow(sigma, -2)
}
"
# Prepare data for JAGS
jags_data <- list(
T = df$T,
trait = df$trait,
N = nrow(df)
)
# Initial values and parameters
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 0, 20), Tm = runif(1, 25, 45), sigma = runif(1, 0, 1))
}
params <- c("c", "T0", "Tm", "sigma")
# Run model
model <- jags.model(textConnection(briere_model), data = jags_data, inits = inits, n.chains = 3)
update(model, 1000)
samples <- coda.samples(model, variable.names = params, n.iter = 5000)
# Posterior draws
samples_df <- as.data.frame(do.call(rbind, samples))
# Predictive temperature range
temp_seq <- seq(min(df$T) - 2, max(df$T) + 5, length.out = 200)
library(ggplot2)
library(rjags)
library(coda)
# JAGS model using Brière function
briere_model <- "
model {
for (i in 1:N) {
trait[i] ~ dnorm(mu[i], tau)
mu[i] <- c * T[i] * (T[i] - T0) * sqrt(Tm - T[i])
}
c ~ dgamma(1, 10)
T0 ~ dunif(0, 24)
Tm ~ dunif(25, 45)
sigma ~ dunif(0, 10)
tau <- pow(sigma, -2)
}
"
# Prepare data for JAGS
jags_data <- list(
T = df$T,
trait = df$trait,
N = nrow(df)
)
# Initial values and parameters
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 0, 20), Tm = runif(1, 25, 45), sigma = runif(1, 0, 1))
}
params <- c("c", "T0", "Tm", "sigma")
# Run model
model <- jags.model(textConnection(briere_model), data = jags_data, inits = inits, n.chains = 3)
update(model, 1000)
samples <- coda.samples(model, variable.names = params, n.iter = 5000)
# Posterior draws
samples_df <- as.data.frame(do.call(rbind, samples))
# Predictive temperature range
temp_seq <- seq(min(df$T) - 2, max(df$T) + 5, length.out = 200)
library(ggplot2)
library(rjags)
library(coda)
# JAGS model using Brière function
briere_model <- "
model {
for (i in 1:N) {
trait[i] ~ dnorm(mu[i], tau)
mu[i] <- c * T[i] * (T[i] - T0) * sqrt(Tm - T[i])
}
c ~ dgamma(1, 10)
T0 ~ dunif(0, 24)
Tm ~ dunif(25, 45)
sigma ~ dunif(0, 10)
tau <- pow(sigma, -2)
}
"
# Prepare data for JAGS
jags_data <- list(
T = df$T,
trait = df$trait,
N = nrow(df)
)
# Initial values and parameters
inits <- function() {
list(c = runif(1, 0, 1), T0 = runif(1, 0, 20), Tm = runif(1, 25, 45), sigma = runif(1, 0, 1))
}
params <- c("c", "T0", "Tm", "sigma")
# Run model
model <- jags.model(textConnection(briere_model), data = jags_data, inits = inits, n.chains = 3)
update(model, 1000)
samples <- coda.samples(model, variable.names = params, n.iter = 5000)
# Posterior draws
samples_df <- as.data.frame(do.call(rbind, samples))
# Predictive temperature range
temp_seq <- seq(min(df$T) - 2, max(df$T) + 5, length.out = 200)
knitr::opts_chunk$set(echo = FALSE)
library(here)
library(dbscan)
library(ggplot2)
library(dplyr)
library(scales)
library(sf)
library(leaflet)
library(viridis)
library(gridExtra)
set.seed(123)
# Load the iris dataset and reduce to two features for simplicity
iris_subset <- iris %>%
select(Petal.Length, Petal.Width)
setwd(here())
knitr::opts_chunk$set(
setwd("."),
echo = TRUE,
fig.path = "figures/",        # save all plots in figures/ folder
fig.align = "center",         # center all figures
out.width = "80%",            # scale them to 80% width by default
dpi = 300                     # high resolution
)
setwd(".")
# Drop NA columns
data = subset(crimeData, !is.na(longitude) & !is.na(latitude) &
start_date != "" & !is.na(start_date) &
end_date != "" & !is.na(end_date))
# Drop NA columns
crimeData = read.csv(file = "Data/crimeDC_24.csv", header = TRUE, sep = ',')
data = subset(crimeData, !is.na(longitude) & !is.na(latitude) &
start_date != "" & !is.na(start_date) &
end_date != "" & !is.na(end_date))
# For interactive maps
library(leaflet)
leaflet(data[data$shift == "MIDNIGHT",]) %>%
addTiles() %>%
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
radius = 1,
fillOpacity = 0.5,
)
# Filter for theft-related crimes that occurred in the EVENING
evening_theft <- crimeData %>%
filter(grepl("THEFT", offense), shift == "EVENING", !is.na(longitude), !is.na(latitude))
# Create a simple Leaflet map
leaflet(evening_theft) %>%
addTiles() %>%
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
radius = 1,
color = "darkred",
fillOpacity = 0.5,
popup = ~paste("Offense:", offense, "<br>", "Shift:", shift)
) %>%
addLegend("bottomright", colors = "darkred", labels = "Theft (Evening)", opacity = 1)
# Filter for theft-related crimes that occurred in the EVENING
evening_theft <- crimeData %>%
filter(grepl("THEFT", offense), shift == "EVENING", !is.na(longitude), !is.na(latitude))
# Create a simple Leaflet map
leaflet(evening_theft) %>%
addTiles() %>%
addCircleMarkers(
lng = ~longitude,
lat = ~latitude,
radius = 1,
color = "darkred",
fillOpacity = 0.5,
popup = ~paste("Offense:", offense, "<br>", "Shift:", shift)
) %>%
addLegend("bottomright", colors = "darkred", labels = "Theft (Evening)", opacity = 1)
library(dbscan)
library(FNN)
library(ggplot2)
# Step 1: Prepare your data (e.g., EVENING thefts)
evening_data <- crimeData %>%
filter(grepl("THEFT", offense), shift == "EVENING", !is.na(longitude), !is.na(latitude))
# Step 2: Create feature matrix (location only, or include time later)
coords <- as.matrix(evening_data[, c("longitude", "latitude")])
# Step 3: Compute distances to the k-th nearest neighbor
k <- 5  # This should match the minPts you'll use in DBSCAN
nn <- get.knn(coords, k = k)
k_distances <- sort(nn$nn.dist[, k])
# Step 4: Plot the sorted k-distances
ggplot(data.frame(k = 1:length(k_distances), distance = k_distances), aes(x = k, y = distance)) +
geom_line(color = "blue") +
labs(title = "k-Distance Plot (k = 5)",
x = "Points sorted by distance to 5th NN",
y = "Distance to 5th Nearest Neighbor") +
theme_minimal()
library(dbscan)
library(FNN)
library(ggplot2)
# Step 1: Prepare your data (e.g., EVENING thefts)
evening_data <- crimeData %>%
filter(grepl("THEFT", offense), shift == "EVENING", !is.na(longitude), !is.na(latitude))
# Step 2: Create feature matrix (location only, or include time later)
coords <- as.matrix(evening_data[, c("longitude", "latitude")])
# Step 3: Compute distances to the k-th nearest neighbor
k <- 5  # This should match the minPts you'll use in DBSCAN
nn <- get.knn(coords, k = k)
k_distances <- sort(nn$nn.dist[, k])
# Step 4: Plot the sorted k-distances
ggplot(data.frame(k = 1:length(k_distances), distance = k_distances), aes(x = k, y = distance)) +
geom_line(color = "blue") +
labs(title = "k-Distance Plot (k = 5)",
x = "Points sorted by distance to 5th NN",
y = "Distance to 5th Nearest Neighbor") +
theme_minimal()
install.packages("xaringanExtra")
library(dbscan)
library(leaflet)
library(dplyr)
library(RColorBrewer)
# DBSCAN on location
coords <- as.matrix(theft_data[, c("longitude", "latitude")])
install.packages('rsconnect')
rsconnect::setAccountInfo(name='o8l671-yusi0roy0yao',
token='9B5585E5A5CB20A1507D9EE594B0899B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='o8l671-yusi0roy0yao',
token='9B5585E5A5CB20A1507D9EE594B0899B',
secret='<SECRET>')
rsconnect::setAccountInfo(name='o8l671-yusi0roy0yao', token='9B5585E5A5CB20A1507D9EE594B0899B', secret='lGblW35XdDDigTyp56zqiyu7/fPbQIwfpEu68mSV')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
library(rsconnect)
rsconnect::deployApp('~/Users/yusiyao/Desktop/VT/STAT_4664_Stochastic/final')
rlang::last_trace()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='o8l671-yusi0roy0yao', token='9B5585E5A5CB20A1507D9EE594B0899B', secret='lGblW35XdDDigTyp56zqiyu7/fPbQIwfpEu68mSV')
rsconnect::setAccountInfo(name='o8l671-yusi0roy0yao', token='34EFF43A40D4E34A5EC58995A2DD8E05', secret='i4fr+GgiH9DFPkeYqgLGZ+DHWWoriYxzIinjYFP1')
library(rsconnect)
rsconnect::deployApp('~/Users/yusiyao/Desktop/VT/STAT_4664_Stochastic/final')
rlang::last_trace()
library(rsconnect)
rsconnect::deployApp('~/Users/yusiyao/Desktop/VT/STAT_4664_Stochastic/final/_site')
library(rsconnect)
rsconnect::deployApp('/Users/yusiyao/Desktop/VT/STAT_4664_Stochastic/final/_site')
library(rsconnect)
rsconnect::deployApp('/Users/yusiyao/Desktop/VT/STAT_4664_Stochastic/final/')
warnings()
library(rsconnect)
rsconnect::deployApp('/Users/yusiyao/Desktop/VT/STAT_4664_Stochastic/final/')
